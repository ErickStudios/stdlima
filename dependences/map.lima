/**
map.lima

provides a form to make arrays/jsons in lima
**/

///! ![enable Lima++]
///! ![Lima++ no_main]
///! ![Lima++ no_std]
///! ![Lima++ std_lib_definition]
///! ![Lima++ jump affter execution]

/**
* Map
* 
* represents a map of string
*
**/
collection<class Map>
{
    /**
    * init
    *
    * initializes the map
    **/
    collection<function init>
    (
    )
        var
            collection<get __value>
            =
            ""
    collection<end function>

    /**
    * transfer
    *
    * coppy the array to a other variable
    **/
    collection<function transfer>
    (
        /**
        variable

        the variable to transfer all keys
        **/
        collection<param variable>
    )

        /**
        first coppy the key list
        **/

        echo collection<get __value>

        var
            collection<param variable>
            =
            collection<get __value>

        /**
        now coppy the enterly array
        **/

        mov
            @eax
            "/array icount"

        mov
            @bx
            collection<get __value>

        %^"!p"

        var
            count
            =
            _returned

        section
        .loop
                
        var
            .cnd
            =
            (count==0)

        jt
        .more

        __endprog__

        section
        .more

        var
            get -> "collection<param variable>"(..)"->["(..)"collection<get __value>"(->)[count]
            =
            GetVar("(this)->["(..)(this)(->)[count](..)"]")

        var
            count
            -=
            1
        jump
        .loop

    collection<end function>

    /**
    * this;item
    *
    * represents a function to acces to the keys
    **/
    collection<function item>
    (
        /**
        Key

        the key to get
        **/
        collection<param Key>
    )
        /**
        configure vars
        **/

        var
            value
            =
            (this)[collection<param Key>]

        collection<return value>

    collection<end function>

    /**
    * this;itemset=
    *
    * assings a value
    **/
    collection<function itemset=>
    (
        collection<param Key>
        collection<param Value>
    )

        /**
        configure vars
        **/

        var
            (this)[collection<param Key>]
            =
            collection<param Value>
        
        /**
        ckeck if the key is not created
        **/

        mov
            @eax
            "/array ContainsValue"

        mov
            @ax
            collection<param Key>

        mov
            @bx
            (this)

        %^"!p"

        if
        (
            _returned
            =
            false
        )
        {
            mov
                @eax
                "/array Add"

            mov
                @ax
                collection<param Key>

            mov
                @bx
                (this)

            %^"!p"

            var
                (this)
                =
                _returned
        }

    collection<end function>
}