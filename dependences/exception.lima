# eception.lima
#
# abstract:
#   lima execptions

///! ![enable Lima++]
///! ![Lima++ no_main]
///! ![Lima++ no_std]
///! ![Lima++ std_lib_definition]
///! ![Lima++ jump affter execution]

import
    stdbase
;

/**
* Exception
*
* represents a exception of the Lima++
**/
collection<class Eception>
{
    /**
    * close
    *
    * if the program closes when the exception ocurred
    **/
    declare var<close>: boolean

    /**
    * code
    *
    * the code of the exception
    **/
    declare var<code>: any

    /**
    * constructor
    *
    * declares the constructor, is used later
    **/
    collection<function constructor>
    (
        /**
        code: represents the code when the exception ocurred
        **/
        collection<param code>

        /**
        close: represents if close the program when the exception ocurred
        **/
        collection<param close>
    )
        /**
        check firs one things
        **/
        if
        (
            typeof collection<param close>
            !=
            boolean
        )
        {
            section
            .xd
            jump
            .xd
        }

        /**
        configure the variables
        **/
        var
            (this)->close 
            = 
            collection<param close>

        var
            (this)->code 
            = 
            collection< paramcode>
    collection<end function>

    /**
    * call
    *
    * this calls to the exception
    **/
    collection<function call>
    (
    )
        /**
        configure variables
        **/

        var
            code
            =
            (this)->code

        var
            close
            =
            (this)->close

        /**
        make the exception
        **/
        echo "an exception has been ocurred: "(..)code

        var
            .cnd
            (close==true)

        jt
            .loop
        __endprog__

        /**
        the close loop
        **/
        section
        .loop
        jump
        .loop
    collection<end function>
}

/**
* QuickException
*
* makes a fast exception
**/
[intersegmental]
message QuickException

    collection<new class?Eception exception>

[endmsg]
